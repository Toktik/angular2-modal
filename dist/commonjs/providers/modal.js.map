{"version":3,"file":"modal.js","sourceRoot":"","sources":["modal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Type,\n    ReflectiveInjector,\n    ViewContainerRef,\n    provide,\n    Injectable,\n    ResolvedReflectiveProvider,\n    Optional\n} from '@angular/core';\n\nimport {\n    ModalRenderer,\n    ModalCompileConfig,\n    ModalBackdropComponent,\n    ModalDropInFactory\n} from '../models/tokens';\n\nimport { DialogRefStack } from '../models/dialog-ref-stack';\nimport { DialogRef } from '../angular2-modal';\nimport { ModalContext, ModalControllingContextBuilder } from '../models/modal-context';\n \nconst _stack = new DialogRefStack<any>();\nconst unsupportedDropIn: any = () => { throw new Error('Unsupported Drop-in.'); };\n\nconst UnsupportedDropInFactory: ModalDropInFactory = {\n    alert: unsupportedDropIn,\n    prompt: unsupportedDropIn,\n    confirm: unsupportedDropIn\n};\n\nfunction normalizeDropInFactory(dropInFactory: ModalDropInFactory): ModalDropInFactory {\n    if (!dropInFactory) return UnsupportedDropInFactory;\n    return ['alert', 'prompt', 'confirm']\n        .reduce((dif, key) => {\n            if (typeof dif[key] !== 'function') dif[key] = <any>unsupportedDropIn;\n            return dif;\n        }, dropInFactory);\n}\n\n@Injectable()\nexport class Modal {\n    /**\n     * A Default view container ref, usually the app root container ref.\n     * Make sure not to provide something that might get destroyed, it will destroy the modals too.\n     * The container is used as logical view holder, elements might be moved.\n     * Has to be set manually until we can find a way to get it automatically.\n     */\n    public defaultViewContainer: ViewContainerRef;\n    private _dropIn: ModalDropInFactory;\n\n    constructor(private _modalRenderer: ModalRenderer,\n                private _backdrop: ModalBackdropComponent,\n                @Optional() _dropIn: ModalDropInFactory) {\n        this._dropIn = normalizeDropInFactory(_dropIn);\n    }\n\n    alert(): ModalControllingContextBuilder<any> {\n        return this._dropIn.alert<any>(this);\n    }\n\n    prompt(): ModalControllingContextBuilder<any> {\n        return this._dropIn.prompt<any>(this);\n    }\n\n    confirm(): ModalControllingContextBuilder<any> {\n        return this._dropIn.confirm<any>(this);\n    }\n\n    /**\n     * Opens a modal window inside an existing component.\n     * If\n     * @param componentType The angular Component to render as the modal content.\n     * @param bindings Resolved providers that will inject into the component provided.\n     * @param context The context for the modal, attached to the dialog instance, DialogRef.context.\n     *        Default: {}\n     * @param viewContainer The element to block using the modal.\n     *        Default: The value set in defaultViewContainer.\n     * @param inside If true, render's the component inside the ViewContainerRef,\n     *        otherwise render's the component in the root element (body in DOM)\n     *        Default: true if ViewContainer supplied, false if not supplied.\n     * @returns {Promise<DialogRef>}\n     */\n    public open(componentType: Type,\n                context: ModalContext = undefined,\n                bindings: ResolvedReflectiveProvider[] = undefined,\n                viewContainer: ViewContainerRef = undefined,\n                inside?: boolean): Promise<DialogRef<any>> {\n\n        inside = inside === undefined ? !!viewContainer : !!inside;\n\n        if (!viewContainer) {\n            if (!this.defaultViewContainer) {\n                throw new Error('defaultViewContainer not set.');\n            }\n            viewContainer = this.defaultViewContainer;\n        }\n\n        if (context) {\n            context.normalize();\n        }\n\n        let dialog = new DialogRef(context || {});\n        dialog.inElement = inside;\n\n        let compileConfig = new ModalCompileConfig(componentType, bindings || []);\n\n\n        let b = ReflectiveInjector.resolve([\n            provide(Modal, {useValue: this}),\n            provide(ModalRenderer, {useValue: this._modalRenderer}),\n            provide(DialogRef, {useValue: dialog}),\n            provide(ModalCompileConfig, {useValue: compileConfig})\n        ]);\n\n        return this._modalRenderer.render(this._backdrop, viewContainer, b, dialog)\n            .then(dialog => {\n                _stack.pushManaged(dialog);\n                return dialog;\n            });\n    }\n\n    /**\n     * Check if a given DialogRef is the top most ref in the stack.\n     * TODO: distinguish between body modal vs in element modal.\n     * @param dialogRef\n     * @returns {boolean}\n     */\n    isTopMost(dialogRef: DialogRef<any>): boolean {\n        return _stack.indexOf(dialogRef) === _stack.length - 1;\n    }\n    \n    stackPosition(dialogRef: DialogRef<any>) {\n        return _stack.indexOf(dialogRef);\n    }\n\n    closeAll() {\n        return _stack.removeAll();\n    }\n\n    get stackLength(): number {\n        return _stack.length;\n    }\n}\n"]}