{"version":3,"file":"deam-head.js","sourceRoot":"","sources":["deam-head.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAQO,eAAe,CAAC,CAAA;AA8BvB;IAAA;QAMc,gBAAW,GAAmC,IAAI,mBAAY,EAAE,CAAC;IAmB/E,CAAC;IAfG,0BAAO,GAAP,UAAQ,KAAY,EAAE,GAA2B;QAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAClB,OAAA,KAAK;YACL,MAAM,EAAE,GAAG;SACd,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;IACtC,CAAC;IAEO,gCAAa,GAArB,UAAsB,MAA+B;QAArD,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,UAAC,aAAa;YACtB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,MAAM;gBACpC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACzB,CAAC,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,GAAG,WAAW,EAAzB,CAAyB,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;IAtBD;QAAC,YAAK,EAAE;;2CAAA;IACR;QAAC,YAAK,EAAE;;iDAAA;IACR;QAAC,YAAK,EAAE;;mDAAA;IAER;QAAC,aAAM,EAAE;;iDAAA;IACT;QAAC,gBAAS,CAAC,UAAU,EAAE,EAAC,IAAI,EAAE,uBAAgB,EAAC,CAAC;;gDAAA;IAxBpD;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,WAAW;YACrB,MAAM,EAAE;gBACN,uPASC;aACF;YACD,WAAW,EAAE,mCAAmC;YAChD,aAAa,EAAE,wBAAiB,CAAC,QAAQ;SAC5C,CAAC;;gBAAA;IA0BF,eAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,gBAAQ,WAyBpB,CAAA","sourcesContent":["import {\n    Component,\n    ViewEncapsulation,\n    Input,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\nimport { DialogRef } from '../../../components/angular2-modal';\n\nexport interface ModalCommandDescriptor {\n    text: string;\n    factory: () => Promise<DialogRef<any>>;\n}\nexport interface DropInClickEvent {\n    event: Event;\n    source: ModalCommandDescriptor;\n}\n\n@Component({\n    selector: 'demo-head',\n    styles: [\n      `\n      .btn-dropin {\n          text-transform: uppercase;\n          margin: 15px;\n          background-color: #219161;\n          border: none;\n          box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);\n          border-radius: 0;\n      }\n      `\n    ],\n    templateUrl: 'demo/app/demo-head/demo-head.html',\n    encapsulation: ViewEncapsulation.Emulated\n})\nexport class DemoHead {\n    result: any;\n    @Input() title: string;\n    @Input() description: string;\n    @Input() modalCommands: ModalCommandDescriptor[];\n    \n    @Output() dropInClick: EventEmitter<DropInClickEvent> = new EventEmitter();\n    @ViewChild('commands', {read: ViewContainerRef}) public vcCommands: ViewContainerRef;\n\n\n    onClick(event: Event, btn: ModalCommandDescriptor) {\n        this.dropInClick.emit({\n            event,\n            source: btn\n        });\n        this.processDialog(btn.factory());\n    }\n\n    private processDialog(dialog: Promise<DialogRef<any>>) {\n        dialog.then((resultPromise) => {\n            return resultPromise.result.then((result) => {\n                this.result = result;\n            }, () => this.result = 'Rejected!');\n        });\n    }\n}\n"]}